"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cycle;

var _pipe = require("@pipes/core/pipe");

var _pipe2 = _interopRequireDefault(_pipe);

var _streams = require("@pipes/core/streams");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This function takes an `iterable` as argument and returns
 * a readable stream that repeatedly emits values generated by the emitter.
 *
 * @example
 * let readable, writable, values=[1,2,3], sum=0;
 *
 * // Create test streams
 *   readable = cycle( values );
 *   writable = createTestWritable( c => { sum+=c });
 *
 * // Connect the streams
 * const expected = 2 * values.reduce( (a, b) => a+b );
 *
 * connect(
 *   readable,
 *   take( 2 * values.length ),
 *   writable
 * ); // sum == expected
 */

function cycle(iterator) {

  // Check if not iterator
  // $FlowFixMe (https://github.com/facebook/flow/issues/1163)
  if (!iterator[Symbol.iterator]) {
    iterator = [iterator];
  }

  var _ref = new _pipe2.default(regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!true) {
              _context.next = 4;
              break;
            }

            return _context.delegateYield(iterator, "t0", 2);

          case 2:
            _context.next = 0;
            break;

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }), { init: null }),
      readable = _ref.readable;

  return readable;
}

// Browserify compat
if (typeof module !== "undefined")
  // $FlowFixMe
  module.exports = cycle;