// @flow

// cycle :: Iterable -> ReadableStream
// cycle function takes an iterable
// as argument and returns a readable stream
// that repeatedly emits values generated by the emitter.
//

import Pipe from "@pipes/core/pipe";
import { ReadableStream } from "@pipes/core/streams";

export default function cycle( iterator: Iterable<mixed> ): ReadableStream {

  // Check if not iterator
  // $FlowFixMe (https://github.com/facebook/flow/issues/1163)
  if ( !iterator[Symbol.iterator] ) {
    iterator = [ iterator ];
  }

  let
  { readable } : { readable: ReadableStream } = new Pipe( function* () {
    while ( true ) {
      yield* iterator;
    }

  }, { init: null });

  return readable;
}

// Browserify compat
if ( typeof module !== "undefined" )
  // $FlowFixMe
  module.exports = cycle;
